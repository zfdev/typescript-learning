var User = (function () {
    function User() {
    }
    User.prototype.isValid = function () {
        return true;
    };
    return User;
}());
var Talk = (function () {
    function Talk() {
    }
    Talk.prototype.isValid = function () {
        return true;
    };
    return Talk;
}());
var GenericRepository = (function () {
    function GenericRepository(url) {
        this._url = url;
    }
    GenericRepository.prototype.getAsync = function () {
        var _this = this;
        return Q.Promise(function (resolve, reject) {
            $.ajax({
                url: _this._url,
                type: "GET",
                dataType: "json",
                success: function (data) {
                    var items = data.items;
                    var lists = [];
                    for (var i = 0; i < items.length; i++) {
                        if (items[i].isValid()) {
                            lists.push(items[i]);
                        }
                    }
                    resolve(lists);
                },
                error: function (e) {
                    reject(e);
                }
            });
        });
    };
    return GenericRepository;
}());
var userRepository = new GenericRepository("./demos/shared/users.json");
userRepository.getAsync().then(function (users) {
    console.log('notGenericUserRepository =>', users);
});
var talkRepository = new GenericRepository("./demos/shared/talks.json");
talkRepository.getAsync().then(function (talks) {
    console.log('notGenericUserRepository =>', talks);
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
